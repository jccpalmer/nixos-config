#!/usr/bin/env bash

set -e

# Flake paths
SYSTEM_FLAKE="$(realpath "$HOME/.dotfiles")"
HOME_FLAKE="$(realpath "$HOME/.dotfiles")"

# Flags
UPDATE=true
RUN_SYSTEM=true
RUN_HOME=true

# Parse flags
for arg in "$@"; do
  case $arg in
    --no-update) UPDATE=false ;;
    --no-system) RUN_SYSTEM=false ;;
    --no-home) RUN_HOME=false ;;
    -h | --help)
      echo "Usage: rebuild [--no-update] [--no-system] [--no-home]"
      exit 0
      ;;
    *) echo "Unknown option: $arg" && exit 1 ;;
  esac
done

update_flake() {
  local path="$1"
  local name="$2"

  if [ ! -d "$path" ]; then
    echo "Skipping update: $name flake directory does not exist at $path."
    return
  fi

  echo "Checking for updates in $name flake..."

  pushd "$path" > /dev/null

  nix flake update

  if git rev-parse --is-inside-work-tree &>/dev/null; then
    # Capture pre- and post-update git status
    PRE_STATUS=$(git status --porcelain)
    POST_STATUS=$(git status --porcelain)

    if [ "$PRE_STATUS" != "$POST_STATUS" ]; then
      echo "$name flake updated."
      git add flake.lock
      git commit -m "flake update: $(date +%F)"
      git push
      echo "Changes pushed to remote."
    else
      echo "$name flake is already up to date."
    fi
  else
    echo "Warning: $path is not a Git repo, skipping Git steps."
  fi

  popd > /dev/null
}

# UPDATE
if $UPDATE; then
  update_flake "$SYSTEM_FLAKE" "System"
  update_flake "$HOME_FLAKE" "Home"
fi

# SYSTEM REBUILD
if $RUN_SYSTEM; then
  echo "Rebuilding system configuration..."
  sudo nixos-rebuild switch --flake "$SYSTEM_FLAKE"
fi

# HOME REBUILD
if $RUN_HOME; then
  echo "Building Home Manager configuration for $USER..."
  nix build "$HOME_FLAKE#${USER}"
  echo "Activating Home Manager configuration..."
  ./result/activate
fi

echo "All done!"

